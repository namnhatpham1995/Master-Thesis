<?php
/*
  ___  _ __   ___ _   _  ___
 / _ \| '_ \ / _ \ | | |/ _ \
| (_) | | | |  __/ |_| |  __/
 \___/|_| |_|\___|\__, |\___|
                  |___/

oneye is released under the GNU Affero General Public License Version 3 (AGPL3)
 -> provided with this release in license.txt
 -> or via web at www.gnu.org/licenses/agpl-3.0.txt

Copyright © 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)
*/

function miniToDo_on_addNoteSignal(){

	$myWindow = new Window(array(
		'title' => 'Add Your To Do Note',
		'name' => 'addNote_WND',
		'father' => 'eyeApps',
		'cent' => 1,
		'width' => 400,
		'height' => 315,
		'style' => TITLE + CLOSE,
		'x' => 10,
		'y' => 70,
		'removepid' => 0
	));
	$myWindow->show();

	include_once(EYE_ROOT.'/'.APP_DIR.'/miniToDo/forms/new_note_form'.EYE_CODE_EXTENSION);
}

function miniToDo_on_viewNoteSignal(){

	$id = $GLOBALS['miniToDo_Sortabletable']->selected;
	if(empty($id)){
		eyeX('messageBox',array('content'=>"Please choose a note title"));
		return true;
	}

	$myHidden = new Hidden(array(
		'name' => 'id',
		'father' => 'viewNote_WND',
		'text' => $id
	));
	eyeWidgets('serialize',array($myHidden));

	$viewNote_CNT = eyeXML('getXMLconfig',array('miniToDo','notes.xml'));
	if(!$viewNote_CNT){
		eyeX('messageBox',array('content'=>"Please choose a note title"));
		return false;
	}

	foreach($viewNote_CNT['notes'][0]['note'] as $note){
		if($note['id'][0] == $id){
			//seleccionamos el titulo de la nota en questión
			$title = $note['title'][0];
			//seleccionamos el contenido de la nota en questión
			$cnt = $note['content'][0];
			$priority = $note['priority'][0];
		}
	}

	$myWindow = new Window(array(
		'title' => $title,
		'name' => 'viewNote_WND',
		'father' => 'eyeApps',
		'cent' => 1,
		'width' => 400,
		'height' => 315,
		'style' => TITLE + CLOSE,
		'x' => 10,
		'y' => 70,
		'removepid' => 0
	));
	$myWindow->show();

	$myLabel = new Label(array(
		'name' => 'miniToDo_lbl',
		'father' => 'viewNote_WND_Content',
		'text' => "Title",
		'x' => 11,
		'y' => 10
	));
	$myLabel->show();

	$myTextBox = new Textbox(array(
		'name' => 'miniToDo_txtB',
		'father' => 'viewNote_WND_Content',
		'x' => 58,
		'y' => 8,
		'width' => 227,
		'text' => $title
	));
	$myTextBox->show();
	$myTextBox->focus();

	$myLabel2 = new Label(array(
		'name' => 'miniToDo_lbl2',
		'father' => 'viewNote_WND_Content',
		'text' => "Priority",
		'horiz' => 1,
		'x' => 57,
		'y' => 10
	));
	$myLabel2->show();

	$myTextBox2 = new Textbox(array(
		'name' => 'miniToDo_txtB2',
		'father' => 'viewNote_WND_Content',
		'x' => 12,
		'y' => 8,
		'horiz' => 1,
		'width' => 20,
		'text' => $priority,
	));
	$myTextBox2->show();

	$myTextArea = new Textarea(array(
		'name' => 'miniToDo_txtA',
		'father' => 'viewNote_WND_Content',
		'x' => 10,
		'y' => 35,
		'width' => 375,
		'height' => 220,
		'text' => $cnt
	));
	$myTextArea->show();

	$myButton = new Button(array(
		'name' => 'updateNote',
		'father' => 'viewNote_WND_Content',
		'caption' => 'Update Note',
		'x' => 11,
		'y' => 263,
		'horiz' => 1,
		'signal' => 'updateNote_SGNL'
	));
	$myButton->addFriend($myTextBox);
	$myButton->addFriend($myTextBox2);
	$myButton->addFriend($myTextArea);
	$myButton->show();
}

function miniToDo_on_deleteNoteSignal() {

	$noteId = $GLOBALS['miniToDo_Sortabletable']->selected;

	if(empty($noteId)){
		eyeX('messageBox',array('content'=>'Please choose a note'));
	return true;
	}

	eyex('messageBox',array(
		'content' => 'Are you sure you want to delete this note?',
		'type' => 3,
		'title' => 'Delete warning',
		'win_name' => 'delete_warning',
		'win_style' => TITLE + CLOSE,
		'btn1_capt' => 'Yes',
		'btn1_name' => 'yDelete',
		'btn2_capt' => 'No',
		'btn2_name' => 'nDelete',
		'img' => '!',
		'win_removepid' => 0

	));
}

function miniToDo_on_yDelete(){

	$noteId = $GLOBALS['miniToDo_Sortabletable']->selected;

	$config = eyeXML('getXMLconfig',array('miniToDo','notes.xml'));
	$i=0;
	foreach($config['notes'][0]['note'] as $note){
		if($note['id'][0] == $noteId){
			unset($config['notes'][0]['note'][$i]);
			eyeXML('setXMLconfig',array('miniToDo','notes.xml',$config));
			//Leemos el archivo con lso cambios ya realizados
			$config = eyeXML('getXMLconfig',array('miniToDo','notes.xml'));
			$trimd = /* utf8 */ trim($config['notes'][0]);
			$file = um('getCurrentUserDir') .'/'. CONF_USER_DIR .'/miniToDo/notes.xml';
			// Si es la ultima nota borramos el archivo
			if(empty($trimd)){
				vfs('real_delete',array($file));
			}
			//Eliminamos la fila que contiene el Id seleccionado
			$GLOBALS['miniToDo_Sortabletable']->delRow($noteId);
			//Cerramos el messagebox anterior
			$GLOBALS['delete_warning']->close();
		}
		$i++;
	}
	return true;
}

function miniToDo_on_nDelete(){
	//Cerramos el messagebox anterior
	$GLOBALS['delete_warning']->close();
	return true;
}

function miniToDo_on_Add($params) {

	$NoteTitle = $GLOBALS['miniToDo_txtB']->text;
	$NoteArea = $GLOBALS['miniToDo_txtA']->text;
	$NotePriority = $GLOBALS['miniToDo_txtB2']->text;

	if ( /* utf8 */ trim($NoteTitle) === '') {
		eyex('messageBox',array('content'=>'Title field is empty.'));
		return;
	}
	if ( /* utf8 */ trim($NoteArea) === '') {
		eyex('messageBox',array('content'=>'Note field is empty.'));
		return;
	}
	if ( /* utf8 */ trim($NotePriority) === '') {
		eyex('messageBox',array('content'=>'Priority field is empty.'));
		return;
	}
	if (!is_numeric($NotePriority)) {
		eyex('messageBox',array('content'=>'Priority field is not a number.'));
		return;
	}

	$id = uniqid();

	$note = array(
		'id' => array($id),
		'title' => array($NoteTitle),
		'priority' => array($NotePriority),
		'content' => array($NoteArea),
	);

	$config = eyeXML('getXMLconfig',array('miniToDo','notes.xml'));

	if(!$config){
		$config = array('notes' => array(array(
			'note' => array()
		)));
		$config['notes'][0]['note'] = array($note);
	} else {
		$config['notes'][0]['note'][] = $note;
	}

	//Guardamos el valor de $config a notes.xml
	eyeXML('setXMLconfig',array('miniToDo','notes.xml',$config));

	//Creamos un array con el valor de $id y de $NoteTitle
	$arr = array($id,$NoteTitle,$NotePriority);

	//Añadimos el array anterior a la sortabletable
	$GLOBALS['miniToDo_Sortabletable']->addRow($arr);

	//Cerramos la ventana
	$GLOBALS['addNote_WND']->close();

	//Mostramos el messagebox para informar que la nota ha sido añadida
	eyex('messageBox',array('content'=>'New note created successfully.'));
	return true;
}

function miniToDo_on_updateNote_SGNL($params){

	$id = $GLOBALS['id']->text;
	$NoteTitle = $GLOBALS['miniToDo_txtB']->text;
	$NoteArea = $GLOBALS['miniToDo_txtA']->text;
	$NotePriority = $GLOBALS['miniToDo_txtB2']->text;

	if ( /* utf8 */ trim($NoteTitle) === '') {
		eyex('messageBox',array('content'=>'Title field is empty.'));
		return;
	}
	if ( /* utf8 */ trim($NoteArea) === '') {
		eyex('messageBox',array('content'=>'Note field is empty.'));
		return;
	}
	if ( /* utf8 */ trim($NotePriority) === '') {
		eyex('messageBox',array('content'=>'Priority field is empty.'));
		return;
	}
	if (!is_numeric($NotePriority)) {
		eyex('messageBox',array('content'=>'Priority field is not a number.'));
		return;
	}

	$config = eyeXML('getXMLconfig',array('miniToDo','notes.xml'));
	$i=0;
	foreach($config['notes'][0]['note'] as $note){
		if($note['id'][0] == $GLOBALS['id']->text){
			$config['notes'][0]['note'][$i]['title'][0] = $NoteTitle;
			$config['notes'][0]['note'][$i]['priority'][0] = $NotePriority;
			$config['notes'][0]['note'][$i]['content'][0] = $NoteArea;
			eyeXML('setXMLconfig',array('miniToDo','notes.xml',$config));
			$GLOBALS['miniToDo_Sortabletable']->delRow($id);
			$GLOBALS['miniToDo_Sortabletable']->addRow(array($id,$NoteTitle,$NotePriority));
			$GLOBALS['viewNote_WND']->close();
		}
		$i++;
	}
	return true;
}

function miniToDo_on_Close(){
	proc('end');
}
?>