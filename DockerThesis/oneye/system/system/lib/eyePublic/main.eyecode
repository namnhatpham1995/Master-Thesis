<?php
/*
  ___  _ __   ___ _   _  ___
 / _ \| '_ \ / _ \ | | |/ _ \
| (_) | | | |  __/ |_| |  __/
 \___/|_| |_|\___|\__, |\___|
                  |___/

oneye is released under the GNU Affero General Public License Version 3 (AGPL3)
 -> provided with this release in license.txt
 -> or via web at www.gnu.org/licenses/agpl-3.0.txt

Copyright © 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)
*/

function lib_eyePublic_getConfig($params=null) {
	if(!isset($params) || !isset($params[0]) || !isset($params[1])){
		//TODO: set error Code
		return false;
	}
	eyePublic('checkPublicStarted',$params);

	$app = $params[0];
	$file = $params[1];
	$user = _getUser($params);

	$userPath = eyePublic('getConfPublicPath',array('user'=>$user));
	$userPath = $userPath.'/'.$app.'/'.$file;
	$userPath = _cleanPath($userPath);

	global $currentUser;
	$oldUser = $currentUser;
	$currentUser = $user;
	$file = eyeXML('getXMLfile',array($userPath));
	$currentUser = $oldUser;

	if(!$file){
		return false;
	}else{
		return $file;
	}
}
function lib_eyePublic_setConfig($params=null) {
	if(!isset($params) || !isset($params[0])  || !isset($params[1]) || !isset($params[2])){
		//TODO: set error Code
		return false;
	}
	eyePublic('checkPublicStarted',$params);

	global $currentUser;
	$user = $currentUser;
	$app = $params[0];
	$file = $params[1];
	$newFile = $params[2];

	$userPath = eyePublic('getConfPublicPath',array('user'=>$user));
	$userPath = $userPath.'/'.$app.'/'.$file;
	$userPath = _cleanPath($userPath);

	$oldUser = $currentUser;
	$currentUser = $user;
	eyeXML('setXMLfile',array($userPath,$newFile));
	$currentUser = $oldUser;

	return true;
}
function lib_eyePublic_delConfig($params=null){
	if(!isset($params) || !isset($params[0])){
		//TODO: set error Code
		return false;
	}
	eyePublic('checkPublicStarted',$params);

	global $currentUser;
	$user = $currentUser;
	$app = $params[0];
	if(isset($params[1])){
		$file = $params[1];
	}

	$userPath = eyePublic('getConfPublicPath',array('user'=>$user)).'/'.$userPath.'/'.$app;
	if(isset($file)){
		$userPath = $userPath.'/'.$file;
	}

	$userPath = _cleanPath($userPath);

	$oldUser = $currentUser;
	$currentUser = $user;
	if(vfs('isDir',array($userPath))){
		if(!vfs('rmdir',array($userPath))){
			$currentUser = $oldUser;
			return false;
		}
	}else{
		if(!vfs('real_delete',array($userPath))){
			$currentUser = $oldUser;
			return false;
		}
	}
	$currentUser = $oldUser;
	return true;
}
function lib_eyePublic_listConfigs($params=null){
	if(isset($params) && isset($params[0])){
		$app = $params[0];
	}
	eyePublic('checkPublicStarted',$params);

	$user = _getUser($params);

	$userPath = eyePublic('getConfPublicPath',array('user'=>$user));
	if(isset($app)){
		$userPath = $userPath.'/'.$app;
		$userPath = _cleanPath($userPath);
	}

	global $currentUser;
	$oldUser = $currentUser;
	$currentUser = $user;
	$content = vfs('real_getDirContent',array($userPath));//Needed just for suid hack
	$currentUser = $oldUser;

	if($content == false){
		return false;
	}else{
		$returnValue = array();
		foreach($content as $dir){
			$returnValue[] = basename($dir);
		}
	}

	return $returnValue;//Return false directly from real_getDirContent
}

//Raw functions
function lib_eyePublic_getXMLfile($params) {
	if(!isset($params) || !isset($params[0])){
		//TODO: set error Code
		return false;
	}
	eyePublic('checkPublicStarted',$params);

	$file = $params[0];
	$user = _getUser($params);

	$userPath = eyePublic('getConfPublicPath',array('user'=>$user));
	$userPath = $userPath.'/'.$file;
	$userPath = _cleanPath($userPath);

	global $currentUser;
	$oldUser = $currentUser;
	$currentUser = $user;

	$file = eyeXML('getXMLfile',array($userPath));
	$currentUser = $oldUser;

	if(!$file){
		return false;
	}else{
		return $file;
	}
}
function lib_eyePublic_setXMLfile($params) {
	if(!isset($params) || !isset($params[0])  || !isset($params[1])){
		//TODO: set error Code
		return false;
	}
	eyePublic('checkPublicStarted',$params);
	global $currentUser;
	$user = $currentUser;
	$file = $params[0];
	$newFile = $params[1];

	$userPath = eyePublic('getConfPublicPath',array('user'=>$user));
	$userPath = $userPath.'/'.$file;
	$userPath = _cleanPath($userPath);

	$oldUser = $currentUser;
	$currentUser = $user;
	eyeXML('setXMLfile',array($userPath,$newFile));
	$currentUser = $oldUser;
	return true;
}

function lib_eyePublic_checkPublicStarted($params=null){
	$user = _getUser($params);

	//if the public config path already exists, return true because user have the needed directories
	//Yes, use the getConfPublicPath inside isDir function is a bit ugly code but I prefer it for performance reasons.
	if(vfs('isdir',array(eyePublic('getConfPublicPath',array('user'=>$user))))){
		return true;
	}

//If the user dosen't have the eyePublic started, start it creating the needed folders
	$userPath = um('getUserDir',array($user)).'/'.PUBLIC_USER_DIR;

	//Suid the process, the user will be restored after directory creation
	global $currentUser;
	$oldUser = $currentUser;
	$currentUser = $user;
	if(!vfs('real_mkdir',array($userPath))){
		return false;
	}
	$userPath = $userPath.'/'.CONF_USER_DIR;
	if(!vfs('real_mkdir',array($userPath))){
		return false;
	}
	//Restore the user
	$currentUser = $oldUser;

	//If paths are created successfully
	return true;
}
//Return the user conf public dir
//Warning! this function dosen't check if folder already exists!!
function lib_eyePublic_getConfPublicPath($params=null){
	$user = _getUser($params);
	return um('getUserDir',array($user)).'/'.PUBLIC_USER_DIR.'/'.CONF_USER_DIR;
}


//Private and dirty tools :)
//If user is passed as params[0] return it, else return the global current user
function _getUser($params=null){
	global $currentUser;
	if(!isset($params['user'])){
		return $currentUser;
	}else{
		return $params['user'];
	}
}

function _cleanPath($path){
	return str_replace('../','',$path);
}

?>