<?php
/*
  ___  _ __   ___ _   _  ___
 / _ \| '_ \ / _ \ | | |/ _ \
| (_) | | | |  __/ |_| |  __/
 \___/|_| |_|\___|\__, |\___|
                  |___/

oneye is released under the GNU Affero General Public License Version 3 (AGPL3)
 -> provided with this release in license.txt
 -> or via web at www.gnu.org/licenses/agpl-3.0.txt

Copyright Â© 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)
*/

/*
	this file is used to emulate php functions when it are not availables on the current php installation/version
*/

date_default_timezone_set(TIMEZONE);

function get_tmp_dir() {
	return EYE_ROOT . '/' . EYEOS_TMP_DIR;
}

function ini_get_size($sName)
{
    $sSize = ini_get($sName);
    $sUnit = /* utf8 */ substr($sSize, -1);
    $iSize = (int) /* utf8 */ substr($sSize, 0, -1);
    switch ( /* utf8 */ strtoupper($sUnit))
    {
        case 'Y' : $iSize *= 1024; // Yotta
        case 'Z' : $iSize *= 1024; // Zetta
        case 'E' : $iSize *= 1024; // Exa
        case 'P' : $iSize *= 1024; // Peta
        case 'T' : $iSize *= 1024; // Tera
        case 'G' : $iSize *= 1024; // Giga
        case 'M' : $iSize *= 1024; // Mega
        case 'K' : $iSize *= 1024; // kilo
    };
    return $iSize;
}

if (!function_exists('hash_equals')) {
	function hash_equals($known_string, $user_string) {
		return $known_string === $user_string;
	}
}

if (!function_exists('json_encode')) {
	function json_encode($a=false) {
		if (is_null($a)) {
			return 'null';
		}
		if ($a === false)  {
    		return 'false';
		}
		if ($a === true) {
    		return 'true';
		}

		if (is_scalar($a)) {
			if (is_float($a)) {
        		// Always use "." for floats.
        		return floatval(str_replace(",", ".", strval($a)));
      		}
      		if (is_string($a)) {
        		static $jsonReplaces = array(array("\\", "/", "\n", "\t", "\r", "\b", "\f", '"'), array('\\\\', '\\/', '\\n', '\\t', '\\r', '\\b', '\\f', '\"'));
        		return '"' . str_replace($jsonReplaces[0], $jsonReplaces[1], $a) . '"';
      		} else {
        		return $a;
      		}
    	}
    
		$isList = true;
		for ($i = 0, reset($a); $i < count($a); $i++, next($a)) {
			if (key($a) !== $i) {
				$isList = false;
				break;
			}
		}

    	$result = array();
    	if ($isList) {
    		foreach ($a as $v) $result[] = json_encode($v);
    		return '[' . join(',', $result) . ']';
    	} else {
    		foreach ($a as $k => $v) {
    			$result[] = json_encode($k).':'.json_encode($v);
    		}
    		return '{' . join(',', $result) . '}';
    	}
	}
}

if (!function_exists('lcfirst')) {
	function /* utf8 */ lcfirst($str) {
		return strtolower(substr($str, 0, 1)) . substr($str, 1); // utf8
	}
}
?>