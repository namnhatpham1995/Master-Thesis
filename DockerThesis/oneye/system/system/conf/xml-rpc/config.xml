<api>
	<services>
		<service>
			<name>vfs</name>
			<function>create</function>
			<return>boolean</return>
			<doc>service.vfs.create(path, [creationApp]) - create a new file in path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>restore</function>
			<return>boolean</return>
			<doc>service.vfs.restore(source path, destination path) - restores a trash file to a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>restoreDir</function>
			<return>boolean</return>
			<doc>service.vfs.restoreDir(source path, destination path) - restores a trash directory to a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>delete</function>
			<return>boolean</return>
			<doc>service.vfs.delete(path) - delete a file in a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>erase</function>
			<return>boolean</return>
			<doc>service.vfs.erase(path) - erase the content of a file in a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>copy</function>
			<return>boolean</return>
			<doc>service.vfs.copy(source path, destionation path) - copy a file from a given path in a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>copyDir</function>
			<return>boolean</return>
			<doc>service.vfs.copyDir(source path, destionation path) - copy a directory and his content from a given path in a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>move</function>
			<return>boolean</return>
			<doc>service.vfs.move(source path, destionation path) - move a file from a given path to a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>rename</function>
			<return>boolean</return>
			<doc>service.vfs.rename(source path, destionation path) - rename a directory from a given path to a new name</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>filesize</function>
			<return>boolean</return>
			<doc>service.vfs.filesize(path) - get the filesize of a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>filemtime</function>
			<return>boolean</return>
			<doc>service.vfs.filemtime(path) - get the filemtime of a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>fileExists</function>
			<return>boolean</return>
			<doc>service.vfs.fileExists(path) - check if a given path exists</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>readInfo</function>
			<return>boolean</return>
			<doc>service.vfs.readInfo(path) - read the file information for a given file</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>mkdir</function>
			<return>boolean</return>
			<doc>service.vfs.mkdir(path) - creates a directory in a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>isdir</function>
			<return>boolean</return>
			<doc>service.vfs.isdir(path) - checks if a given path is a directory</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>rmdir</function>
			<return>boolean</return>
			<doc>service.vfs.rmdir(path) - delete a directory in a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>checkPermissions</function>
			<return>boolean</return>
			<doc>service.vfs.checkPermissions(path) - checks the permissions of a given path</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>getDirContent</function>
			<return>array</return>
			<doc>service.vfs.getDirContent(path) - get the content of a given directory</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>readFile</function>
			<return>string</return>
			<doc>service.vfs.readFile(path) - get the content of a file</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>writeFile</function>
			<return>boolean</return>
			<doc>service.vfs.writeFile(path,content) - write a new content for a file</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>getDirSize</function>
			<return>integer</return>
			<doc>service.vfs.getDirSize(path) - get the size of a given directory</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>checkQuota</function>
			<return>boolean</return>
			<doc>service.vfs.checkQuota(path,isNoFilename) - check the quota of the current user and adds the size of a given file</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>checkSpecialChars</function>
			<return>boolean</return>
			<doc>service.vfs.checkSpecialChars(filename) - checks the filename for special characters</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>appendToFileBinary</function>
			<return>boolean</return>
			<doc>service.vfs.appendToFileBinary(path,base64_content) - write a new content for a file, it takes binary xml-rpc as argument</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>getFileBinary</function>
			<return>string</return>
			<doc>service.vfs.getFileBinary(path) - get the content of a file base64-encoded</doc>
		</service>
		<service>
			<name>um</name>
			<function>getCurrentUserDir</function>
			<return>string</return>
			<doc>service.um.getCurrentUserDir() - get current user home directory</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>getFileBinary</function>
			<return>string</return>
			<doc>service.vfs.getFileBinary() - get the content of a file base64-encoded</doc>
		</service>
		<service>
			<name>vfs</name>
			<function>getFolderList</function>
			<return>array</return>
			<doc>service.vfs.getFolderList() - get the folders and subfolders of a given directory</doc>
		</service>
	</services>
	<libs>
		<lib>
			<name>eyeBoard</name>
			<function>getMessages</function>
			<return>array</return>
			<doc>lib.eyeBoard.getMessages() - get an array with the messages of eyeBoard</doc>
		</lib>
		<lib>
			<name>eyeBoard</name>
			<function>getMessagesHtml</function>
			<return>string</return>
			<doc>lib.eyeBoard.getMessagesHtml() - get a XHTML string with the messages of eyeBoard</doc>
		</lib>
		<lib>
			<name>eyeBoard</name>
			<function>newMessage</function>
			<return>boolean</return>
			<doc>lib.eyeBoard.newMessage() - write a new message in eyeBoard</doc>
		</lib>
		<lib>
			<name>eyeBoard</name>
			<function>clear</function>
			<return>boolean</return>
			<doc>lib.eyeBoard.clear() - clear the messages of the board, requires root</doc>
		</lib>
	</libs>
</api>